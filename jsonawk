#!/usr/bin/env node

var program = require('commander');
var readline = require('readline');
var _ = require('lodash');
var child = require('child_process');
var path = require('path');
var fs = require('fs');
var pack = require('./package.json');

var theCode = null;
program
  .version(pack.version)
  .arguments('<jscode>')
  .action(function (jscode) {
    theCode = jscode;
  });
program.parse(process.argv);

if (!theCode) {
  console.error('no js code, eg: cat file.json | jsonawk \'console.log(data)\'');
  process.exit(-1);
}

try {

  theCode = theCode.trim();
  var beginCode = ''
    , code = ''
    , endCode = '';

  if (theCode.indexOf('BEGIN') == 0) {
    var snip = theCode.substr(5);
    var foldN = 0;
    for (var i = 0; i < snip.length; i++) {
      beginCode += snip.charAt(i);
      if (snip.charAt(i) == '}') {
        foldN--;
        if (foldN == 0) {
          code = snip.substr(i + 1);
          break;
        }
      }
      if (snip.charAt(i) == '{') foldN++;
    }
  } else {
    code = theCode;
  }
  var codes = code.split(/}\s*END\s*{/m);
  if (codes.length == 2) {
    code = codes[0] + '}';
    endCode = '{' + codes[1];
  }
  console.log(beginCode,"|",code,"|",endCode);

  var Func = new Function('_', beginCode + ' return { \
    line: function($,data,_) { \
      '+ code + '\
    }, \
    end: function() { \
      '+ endCode + '\
    }}');
  var func = Func(_);
} catch (e) {

  console.log('js code illegal:\n```\n' + theCode);
  return;
}

var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

rl.on('line', function (line) {

  var data = JSON.parse(line.trim());
  func.line.apply({}, [data, data, _]);
})

rl.on('close', function (line) {
  func.end();
})
